<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="RimDialogue.Core" #>
You are a dialogue writer for the game RimWorld a sci-fi colony simulation game set on a distant, lawless planet.
<# if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientNickName)) { #>
Your job is to create a short conversation of <#= this.MaxOutputWords #> words or less total between <#= this.DialogueData.initiatorNickName #> and <#= this.DialogueData.recipientNickName #> based on the data provided and this interaction: <#= this.DialogueData.interaction #> 
Start the conversation with <#= this.DialogueData.initiatorNickName #>'s part.
Always put <#= this.DialogueData.initiatorNickName #>'s and <#= this.DialogueData.recipientNickName #>'s name in the dialogue.
<# } else { #>
Your job is to create a short monologue of <#= this.MaxOutputWords #> words for <#= this.DialogueData.initiatorNickName #> based on the data provided and this interaction: <#= this.DialogueData.interaction #> 
<# } #>
<# if (this.DialogueData.interaction.Contains(" lovin' ")) { #>
The word "lovin'" is a euphemism for sex.
<# } #>
<# if (this.Config.ShowSpecialInstructions) { #>
<#= this.DialogueData.specialInstructions #>
<#  if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorInstructions)) { #>
Instructions for <#= this.DialogueData.initiatorNickName #>: <#= this.DialogueData.initiatorInstructions #>
<#  } #>
<#  if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientInstructions)) { #>
Instructions for <#= this.DialogueData.recipientNickName #>: <#= this.DialogueData.recipientInstructions #>
<#  } #>
<# } #>
It is important that you respond with only the dialogue exchange.
<# if (this.Config.ShowAnimal && this.DialogueData.initiatorIsAnimal) { #>
<#= this.DialogueData.initiatorNickName #> can't speak, but they can communicate through actions, sounds, and body language.
<# } #>
<# if (this.Config.ShowAnimal && this.DialogueData.recipientIsAnimal) { #>
<#= this.DialogueData.recipientNickName #> can't speak, but they can communicate through actions, sounds, and body language.
<# } #>
<# if (this.Config.ShowPersonality) { #>
<# if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorPersonality)) { #>
<#= this.DialogueData.initiatorNickName #>'s personality is <#= this.DialogueData.initiatorPersonality #>
<#= this.DialogueData.initiatorPersonalityDescription #>
<# } #>
<# } #>
<# if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientPersonality)) { #>
<#= this.DialogueData.recipientNickName #>'s personality is <#= this.DialogueData.recipientPersonality #>
<#= this.DialogueData.recipientPersonalityDescription #>
<# } #>
<# if (this.Config.ShowMoodString && !string.IsNullOrWhiteSpace(this.DialogueData.initiatorMoodString)) { #>
<#= this.DialogueData.initiatorNickName #>'s overall mood is <#= this.DialogueData.initiatorMoodString #>.
<# } #>
<# if (this.Config.ShowMoodString && !string.IsNullOrWhiteSpace(this.DialogueData.recipientMoodString)) { #>
<#= this.DialogueData.recipientNickName #>'s overall mood is <#= this.DialogueData.recipientMoodString #>.
<# } #>
<# if (this.Config.ShowOpinions) { #>
<#= this.DialogueData.initiatorNickName #> <#= DescribeOpinion(this.DialogueData.initiatorOpinionOfRecipient2) #> <#= this.DialogueData.recipientNickName #>.
<#= this.DialogueData.recipientNickName #> <#= DescribeOpinion(this.DialogueData.recipientOpinionOfInitiator2) #> <#= this.DialogueData.initiatorNickName #>.
<# } #>
<# if (this.Config.ShowScenario && !string.IsNullOrWhiteSpace(this.DialogueData.scenario) && (this.DialogueData.initiatorIsColonist || this.DialogueData.recipientIsColonist)) {#>
This games scenario is: <#= this.DialogueData.scenario #>
<# } #>
<# if (this.Config.ShowFullName) {#>
<#   if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorFullName)) { #>
<#= this.DialogueData.initiatorNickName #>'s full name is <#= this.DialogueData.initiatorFullName #>.
<#   } #>
<#   if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientFullName)) { #>
<#= this.DialogueData.recipientNickName #>'s full name is <#= this.DialogueData.recipientFullName #>.
<#   } #>
<# } #>
<# if (this.Config.ShowAgeRaceAndGender) {#>
<#= this.DialogueData.initiatorNickName #>'s is a <#= this.DialogueData.initiatorGender #> <#= this.DialogueData.initiatorRace #> age <#= this.DialogueData.initiatorAge #> years old.
<#   if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientNickName)) { #>
<#= this.DialogueData.recipientNickName #>'s is a <#= this.DialogueData.recipientGender #> <#= this.DialogueData.recipientRace #> age <#= this.DialogueData.recipientAge #> years old.
<#   } #>
<# } #>
<# if (this.Config.ShowDescription) {#>
<#   if (this.DialogueData.initiatorDescription == this.DialogueData.recipientDescription) { #>
Both <#= this.DialogueData.initiatorNickName #> and <#= this.DialogueData.recipientNickName #> are <#= this.DialogueData.initiatorDescription #>.
<#   } else { #>
<#= this.DialogueData.initiatorNickName #>'s is <#= this.DialogueData.initiatorDescription #>
<#     if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientNickName)) { #>
<#= this.DialogueData.recipientNickName #>'s is <#= this.DialogueData.recipientDescription #>
<#     } #>
<#   } #>
<# } #>
<# if (this.Config.ShowPawnType) { #>
<#   if (this.DialogueData.initiatorIsColonist && this.DialogueData.recipientIsColonist) { #>
Both <#= this.DialogueData.initiatorNickName #> and <#= this.DialogueData.recipientNickName #> are colonists and members of the player's colony.
<#   } else if (this.DialogueData.initiatorIsPrisoner && this.DialogueData.recipientIsPrisoner) { #>
Both <#= this.DialogueData.initiatorNickName #> and <#= this.DialogueData.recipientNickName #> are prisoners. In RimWorld, prisoners are both assets and risks. Colonists house them in prison cells, meeting needs like food, care, and recreation to prevent escapes. Prisoners can be recruited, traded, or exploited for labor or medical resources.
<#   } else if (this.DialogueData.initiatorIsHostile && this.DialogueData.recipientIsHostile) { #>
Both <#= this.DialogueData.initiatorNickName #> and <#= this.DialogueData.recipientNickName #> are raiders and are here to attack the player's colony.
<#   } else { #>
<#     if (this.DialogueData.initiatorIsColonist) { #>
<#= this.DialogueData.initiatorNickName #> is a colonist and a member of the player's colony.  
<#     } else if (this.DialogueData.initiatorIsPrisoner) { #>
<#= this.DialogueData.initiatorNickName #> is a prisoner.  In RimWorld, prisoners are both assets and risks. Colonists house them in prison cells, meeting needs like food, care, and recreation to prevent escapes. Prisoners can be recruited, traded, or exploited for labor or medical resources.
<#     } else if (this.DialogueData.initiatorIsHostile) { #>
<#= this.DialogueData.initiatorNickName #> is a raider and is here to attack the player's colony.
<#     } else if (!this.DialogueData.initiatorIsAnimal) { #>
<#= this.DialogueData.initiatorNickName #> is an NPC and just a temporary visitor here.  They are probably here as part of a trade caravan.
<#     } #>
<#     if (this.DialogueData.recipientIsColonist) { #>
<#= this.DialogueData.recipientNickName #> is a colonist and a member of the player's colony.  
<#     } else if (this.DialogueData.recipientIsPrisoner) { #>
<#= this.DialogueData.recipientNickName #> is a prisoner. In RimWorld, prisoners are both assets and risks. Colonists house them in prison cells, meeting needs like food, care, and recreation to prevent escapes. Prisoners can be recruited, traded, or exploited for labor or medical resources.
<#     } else if (this.DialogueData.recipientIsHostile) { #>
<#= this.DialogueData.recipientNickName #> is a raider and is here to attack the player's colony.
<#     } else if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientNickName) && !this.DialogueData.recipientIsAnimal) { #>
<#= this.DialogueData.recipientNickName #> is an NPC and just a temporary visitor here.
<#     } #>
<#   } #>
<# } #>
<# if (this.Config.ShowRoyaltyTitle && !string.IsNullOrWhiteSpace(this.DialogueData.initiatorRoyaltyTitle)) { #>
<#= this.DialogueData.initiatorNickName #> is royalty. Pawns speak differently to royalty, often with more respect and formality.
<#= this.DialogueData.initiatorNickName #>'s royal title is <#= this.DialogueData.initiatorRoyaltyTitle #>
<# } #>
<# if (this.Config.ShowRoyaltyTitle && !string.IsNullOrWhiteSpace(this.DialogueData.recipientRoyaltyTitle)) { #>
<#= this.DialogueData.recipientRoyaltyTitle #> is royalty. Pawns speak differently to royalty, often with more respect and formality.
<#= this.DialogueData.recipientNickName #>'s royal title is <#= this.DialogueData.recipientRoyaltyTitle #>
<# } #>
<# if (this.Config.ShowFaction) { #>
<#   if (this.DialogueData.initiatorFactionName == this.DialogueData.recipientFactionName) { #>
Both <#= this.DialogueData.initiatorNickName #> and <#= this.DialogueData.recipientNickName #> belong to the same faction, called "<#= this.DialogueData.initiatorFactionName #>". It is a <#= this.DialogueData.initiatorFactionLabel #> faction. <#= this.DialogueData.initiatorFactionDescription #>
<#   } else { #>
<#     if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorFactionName)) { #> 
The faction <#= this.DialogueData.initiatorNickName #> belongs to is called "<#= this.DialogueData.initiatorFactionName #>". It is a <#= this.DialogueData.initiatorFactionLabel #> faction. <#= this.DialogueData.initiatorFactionDescription #>
<#     } #>
<#     if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientFactionName)) { #> 
The faction <#= this.DialogueData.recipientNickName #> belongs to is called "<#= this.DialogueData.recipientFactionName #>". It is a <#= this.DialogueData.recipientFactionLabel #> faction. <#= this.DialogueData.recipientFactionDescription #>
<#     } #>
<#   } #>
<# } #>
<# if (this.Config.ShowIdeology) { #>
<#   if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorIdeologyName) && this.DialogueData.initiatorIdeologyName == this.DialogueData.recipientIdeologyName) { #>
Both <#= this.DialogueData.initiatorNickName #> and <#= this.DialogueData.recipientNickName #> share the same ideology, called "<#= this.DialogueData.initiatorIdeologyName #>".
The narrative of "<#= this.DialogueData.initiatorIdeologyName #>" is: <#= this.DialogueData.initiatorIdeologyDescription #>
<#     if (this.Config.ShowPrecepts && this.DialogueData.initiatorIdeologyPrecepts.Any()) {#>
The precepts of their ideology are: <#= String.Join(" ", this.DialogueData.initiatorIdeologyPrecepts) #>
<#     } #>
<#  } else { #>
<#    if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorIdeologyName)) { #>
<#= this.DialogueData.initiatorNickName #>'s ideology is "<#= this.DialogueData.initiatorIdeologyName #>".
The narrative of "<#= this.DialogueData.initiatorIdeologyName #>" is: <#= this.DialogueData.initiatorIdeologyDescription #>
<#      if (this.Config.ShowPrecepts && this.DialogueData.initiatorIdeologyPrecepts.Any()) {#>
The precepts of <#= this.DialogueData.initiatorNickName #>'s ideology are: <#= String.Join(" ", this.DialogueData.recipientIdeologyPrecepts) #>
<#      } #>
<#    } #>
<#    if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientIdeologyName)) { #>
<#= this.DialogueData.recipientNickName #>'s ideology is <#= this.DialogueData.recipientIdeologyName #>.
The narrative of this ideology is: <#= this.DialogueData.recipientIdeologyDescription #>
<#      if (this.Config.ShowPrecepts && this.DialogueData.recipientIdeologyPrecepts.Any()) {#>
The precepts of <#= this.DialogueData.recipientNickName #>'s ideology are: <#= String.Join(" ", this.DialogueData.recipientIdeologyPrecepts) #>
<#      } #>
<#	  } #>
<#  } #>
<#} #>
<# if (this.Config.ShowAdulthood && !string.IsNullOrWhiteSpace(this.DialogueData.initiatorAdulthood)) { #>
<#= this.DialogueData.initiatorNickName #>'s adulthood was spent as: <#= this.DialogueData.initiatorAdulthood #>
<# } #>
<# if (this.Config.ShowAdulthood && !string.IsNullOrWhiteSpace(this.DialogueData.recipientAdulthood)) { #>
<#= this.DialogueData.recipientNickName #>'s adulthood was spent as: <#= this.DialogueData.recipientAdulthood #>
<# } #>
<# if (this.Config.ShowChildhood && !string.IsNullOrWhiteSpace(this.DialogueData.initiatorChildhood)) { #>
<#= this.DialogueData.initiatorNickName #>'s childhood was spent as: <#= this.DialogueData.initiatorChildhood #>
<# } #>
<# if (this.Config.ShowChildhood && !string.IsNullOrWhiteSpace(this.DialogueData.recipientChildhood)) { #>
<#= this.DialogueData.recipientNickName #>'s childhood was spent as: <#= this.DialogueData.recipientChildhood #>
<# } #>
<# if (this.Config.ShowJob) { #>
<#   if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorJobReport)) { #>
<#= this.DialogueData.initiatorNickName #>'s current activity is <#= this.DialogueData.initiatorJobReport #>
<#     if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorCarrying)) { #>
<#= this.DialogueData.initiatorNickName #> is carrying <#= this.DialogueData.initiatorCarrying #>.
<#     } #>
<#   } #>
<#   if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientJobReport)) { #>
<#= this.DialogueData.recipientNickName #>'s current activity is <#= this.DialogueData.recipientJobReport #>
<#     if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientCarrying)) { #>
<#= this.DialogueData.recipientNickName #> is carrying <#= this.DialogueData.recipientCarrying #>.
<#     } #>
<#   } #>
<# } #>
<# if (this.Config.ShowCombatLog) { #>
<#   if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorLastBattle) && this.DialogueData.initiatorCombatLog.Any()) { #>
In the recent battle "<#= this.DialogueData.initiatorLastBattle #>" this happened: <#= String.Join(" ", this.DialogueData.initiatorCombatLog) #>
<#   } #>
<#   if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientLastBattle) && this.DialogueData.recipientCombatLog.Any()) { #>
In the recent battle "<#=this.DialogueData.recipientLastBattle #>" this happened: <#= String.Join(" ", this.DialogueData.recipientCombatLog) #>
<#   } #>
<# } #>
<# if (this.Config.ShowHair && !string.IsNullOrWhiteSpace(this.DialogueData.initiatorHair)) { #>
<#= this.DialogueData.initiatorNickName #>'s hair style is <#= this.DialogueData.initiatorHair #> 
<# } #>
<# if (this.Config.ShowHair && !string.IsNullOrWhiteSpace(this.DialogueData.recipientHair)) { #>
<#= this.DialogueData.recipientNickName #>'s hair style is <#= this.DialogueData.recipientHair #> 
<# } #>
<# if (this.Config.ShowBeard) { #>
<#   if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorBeard) && this.DialogueData.initiatorBeard != "no beard") { #>
<#= this.DialogueData.initiatorNickName #>'s beard style is <#= this.DialogueData.initiatorBeard #>.
<#   } #>
<#   if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientBeard) && this.DialogueData.recipientBeard != "no beard") { #>
<#= this.DialogueData.recipientNickName #>'s beard style is <#= this.DialogueData.recipientBeard #>.
<#   } #>
<# } #>
<# if (this.Config.ShowTattoo && !string.IsNullOrWhiteSpace(this.DialogueData.initiatorFaceTattoo) && this.DialogueData.initiatorFaceTattoo != "none") { #>
<#= this.DialogueData.initiatorNickName #> has a face tattoo of a <#= this.DialogueData.initiatorFaceTattoo #> 
<# } #>
<# if (this.Config.ShowTattoo && !string.IsNullOrWhiteSpace(this.DialogueData.recipientFaceTattoo) && this.DialogueData.recipientFaceTattoo != "none") { #>
<#= this.DialogueData.recipientNickName #> has a face tattoo of a <#= this.DialogueData.recipientFaceTattoo #> 
<# } #>
<# if (this.Config.ShowTattoo && !string.IsNullOrWhiteSpace(this.DialogueData.initiatorBodyTattoo) && this.DialogueData.initiatorBodyTattoo != "none") { #>
<#= this.DialogueData.initiatorNickName #> has body tattoo of a <#= this.DialogueData.initiatorBodyTattoo #> 
<# } #>
<# if (this.Config.ShowTattoo && !string.IsNullOrWhiteSpace(this.DialogueData.recipientBodyTattoo) && this.DialogueData.recipientBodyTattoo != "none") { #>
<#= this.DialogueData.recipientNickName #> has body tattoo of a <#= this.DialogueData.recipientBodyTattoo #> 
<# } #>
<# if (this.Config.ShowRelations && this.DialogueData.initiatorRelations.Any()) { #>
<#= this.DialogueData.initiatorNickName #>'s family relations are: <#= String.Join(", ", this.DialogueData.initiatorRelations) #>
<# } #>
<# if (this.Config.ShowRelations && this.DialogueData.recipientRelations.Any()) { #>
<#= this.DialogueData.recipientNickName #>'s family relations are: <#= String.Join(", ", this.DialogueData.recipientRelations) #>
<# } #>
<# if (this.Config.ShowTraits && this.DialogueData.initiatorTraits.Any()) { #>
<#= this.DialogueData.initiatorNickName #>'s traits are: <#= String.Join(" ", this.DialogueData.initiatorTraits) #>
<# } #>
<# if (this.Config.ShowTraits && this.DialogueData.recipientTraits.Any()) { #>
<#= this.DialogueData.recipientNickName #>'s traits are: <#= String.Join(" ", this.DialogueData.recipientTraits) #>
<# } #>
<# if (this.Config.ShowSkills && this.DialogueData.initiatorSkills.Any()) { #>
<#= this.DialogueData.initiatorNickName #>'s skills are: <#= String.Join(", ", this.DialogueData.initiatorSkills) #>
<# } #>
<# if (this.Config.ShowSkills && this.DialogueData.recipientSkills.Any()) { #>
<#= this.DialogueData.recipientNickName #>'s skills are: <#= String.Join(", ", this.DialogueData.recipientSkills) #>
<# } #>
<# if (this.Config.ShowMoodThoughts && this.DialogueData.initiatorMoodThoughts.Any()) { #>
<#= this.DialogueData.initiatorNickName #>'s recent thoughts are: <#= GetThoughts(this.DialogueData.initiatorNickName, this.DialogueData.initiatorMoodThoughts) #>
<# } #>
<# if (this.Config.ShowMoodThoughts && this.DialogueData.recipientMoodThoughts.Any()) { #>
<#= this.DialogueData.recipientNickName #>'s recent thoughts are: <#= GetThoughts(this.DialogueData.recipientNickName, this.DialogueData.recipientMoodThoughts) #>
<# } #>
<# if (this.Config.ShowHealth && this.DialogueData.initiatorHediffs.Any()) { #>
<#= this.DialogueData.initiatorNickName #>'s health conditions are: <#= String.Join(", ", this.DialogueData.initiatorHediffs) #>
<# } #>
<# if (this.Config.ShowHealth && this.DialogueData.recipientHediffs.Any()) { #>
<#= this.DialogueData.recipientNickName #>'s health conditions are: <#= String.Join(", ", this.DialogueData.recipientHediffs) #>
<# } #>
<# if (this.Config.ShowApparel && this.DialogueData.initiatorApparel.Any()) { #>
<#= this.DialogueData.initiatorNickName #>'s apparel is: <#= String.Join(" ", this.DialogueData.initiatorApparel) #>
<# } #>
<# if (this.Config.ShowApparel && this.DialogueData.recipientApparel.Any()) { #>
<#= this.DialogueData.recipientNickName #>'s apparel is: <#= String.Join(" ", this.DialogueData.recipientApparel) #>
<# } #>
<# if (this.Config.ShowWeapons && this.DialogueData.initiatorWeapons.Any()) { #>
<#= this.DialogueData.initiatorNickName #>'s weapons and equipment are: <#=  String.Join(" ", this.DialogueData.initiatorWeapons) #>
<# } #>
<# if (this.Config.ShowWeapons && this.DialogueData.recipientWeapons.Any()) { #>
<#= this.DialogueData.recipientNickName #>'s weapons and equipment are: <#= String.Join(" ", this.DialogueData.recipientWeapons) #>
<# } #>
<# if (this.Config.ShowNeeds) { #>
<#   if (this.DialogueData.initiatorComfortPercentage >= 0) { #>
<#= this.DialogueData.initiatorNickName #> is <#= DescribeComfortLevel(this.DialogueData.initiatorComfortPercentage) #>.
<#   } #>
<#   if (this.DialogueData.recipientComfortPercentage >= 0) { #>
<#= this.DialogueData.recipientNickName #> is <#= DescribeComfortLevel(this.DialogueData.recipientComfortPercentage) #>.
<#   } #>
<#   if (this.DialogueData.initiatorFoodPercentage >= 0) { #>
<#= this.DialogueData.initiatorNickName #> is <#= DescribeHungerLevel(this.DialogueData.initiatorFoodPercentage) #>.
<#   } #>
<#   if (this.DialogueData.recipientFoodPercentage >= 0) { #>
<#= this.DialogueData.recipientNickName #> is <#= DescribeHungerLevel(this.DialogueData.recipientFoodPercentage) #>.
<#   } #>
<#   if (this.DialogueData.initiatorRestPercentage >= 0) { #>
<#= this.DialogueData.initiatorNickName #> is <#= DescribeRestLevel(this.DialogueData.initiatorRestPercentage) #>.
<#   } #>
<#   if (this.DialogueData.recipientRestPercentage >= 0) { #>
<#= this.DialogueData.recipientNickName #> is <#= DescribeRestLevel(this.DialogueData.recipientRestPercentage) #>.
<#   } #>
<#   if (this.DialogueData.initiatorJoyPercentage >= 0) { #>
<#= this.DialogueData.initiatorNickName #> is <#= DescribeEngagementLevel(this.DialogueData.initiatorJoyPercentage) #> with what they are doing.
<#   } #>
<#   if (this.DialogueData.recipientJoyPercentage >= 0) { #>
<#= this.DialogueData.recipientNickName #> is <#= DescribeEngagementLevel(this.DialogueData.recipientJoyPercentage) #> with what they are doing.
<#   } #>
<#   if (this.DialogueData.initiatorBeautyPercentage >= 0) { #>
<#= this.DialogueData.initiatorNickName #> feels their environment is <#= DescribeEnvironmentBeauty(this.DialogueData.initiatorBeautyPercentage) #>.
<#   } #>
<#   if (this.DialogueData.recipientBeautyPercentage >= 0) { #>
<#= this.DialogueData.recipientNickName #> feels their environment is <#= DescribeEnvironmentBeauty(this.DialogueData.recipientBeautyPercentage) #>.
<#   } #>
<# } #>
<# if (this.Config.ShowColonyData && this.DialogueData.initiatorIsColonist && this.DialogueData.recipientIsColonist) { #>
<#   if (this.Config.ShowTimeData) { #>
The colony started <#= this.DaysAgoLabel #>.
The current season is <#= this.DialogueData.season #>.
The current time of day is <#= DescribeTimeOfDay(this.DialogueData.hourOfDay) #>.
<#   } #>
<#   if (this.DialogueData.colonistsCount >= 0) { #>
It is <#= DescribeColonySize(this.DialogueData.colonistsCount) #>
<#   } #>
<#   if (this.DialogueData.wealthTotal >= 0) { #>
<#= WealthDescription(this.DialogueData.wealthTotal) #>
<#   } #>
<#   if (this.DialogueData.defensesTotal >= 0) { #>
The colony has <#= DescribeDefenses(this.DialogueData.defensesTotal) #>
<#   } #>
<#   if (this.DialogueData.foodTotal >= 0) { #>
The colony has <#= DescribeFoodAmount(this.DialogueData.foodTotal, this.DialogueData.colonistsCount, this.DialogueData.prisonersCount) #>
<#   } #>
<#   if (this.DialogueData.prisonersCount >= 0) { #>
The colony has <#= DescribePrisonerCount(this.DialogueData.prisonersCount) #>
<#   } #>
<#   if (this.DialogueData.medicineTotal >= 0) { #>
The colony has <#= DescribeMedicineSupply(this.DialogueData.medicineTotal) #>
<#   } #>
<#   if (this.DialogueData.drugsTotal >= 0) { #>
The colony has <#= DescribeDrugSupply(this.DialogueData.drugsTotal, this.DialogueData.colonistsCount) #>
<#   } #>
<#   if (this.Config.ShowRecentIncidents) { #>
Recent incidents to occur in the colony are: <#= String.Join(", ",this.DialogueData.recentIncidents) #>
<#   } #>
<#   if (this.Config.ShowOtherFactions && this.DialogueData.otherFactions.Any()) { #>
Other factions in the area are: <#= String.Join(", ", this.DialogueData.otherFactions) #>
<#   } #>
<# } #>
<# if (this.Config.ShowBiome) { #>
The biome of this area is <#= this.DialogueData.biome #>
<# } #>
<# if (this.Config.ShowWeather) { #>
The current weather is <#= this.DialogueData.currentWeather #>
The temperature outdoors is <#= TemperatureFeel(this.DialogueData.outdoorTemp) #>.
<# } #>
<# if (this.Config.ShowRoom) { #>
<#   if (this.DialogueData.isOutside) { #>
<#= this.DialogueData.initiatorNickName #> and <#= this.DialogueData.recipientNickName #> are currently outside.
<#   } else { #>
<#= this.DialogueData.initiatorNickName #> and <#= this.DialogueData.recipientNickName #> are currently indoors.
<#     if (!string.IsNullOrWhiteSpace(this.DialogueData.room) && this.DialogueData.room != "none") { #>
<#= this.DialogueData.initiatorNickName #> and <#= this.DialogueData.recipientNickName #> are in the <#= this.DialogueData.room #>.
The <#= this.DialogueData.room #> is <#= DescribeImpressiveness(this.DialogueData.roomImpressiveness) #>.
The <#= this.DialogueData.room #> is <#= DescribeCleanliness(this.DialogueData.roomCleanliness) #>.
<#     } #>
<#   } #>
<# } #>
<# if (this.Config.RepeatInstructions) { #>
<#   if (this.Config.ShowAnimal && this.DialogueData.initiatorIsAnimal) { #>
<#= this.DialogueData.initiatorNickName #> can't speak, but they can communicate through actions, sounds, and body language.
<#   } #>
<#   if (this.Config.ShowAnimal && this.DialogueData.recipientIsAnimal) { #>
<#= this.DialogueData.recipientNickName #> can't speak, but they can communicate through actions, sounds, and body language.
<#   } #>
<#   if (this.Config.ShowMoodString && !string.IsNullOrWhiteSpace(this.DialogueData.initiatorMoodString)) { #>
<#= this.DialogueData.initiatorNickName #>'s overall mood is <#= this.DialogueData.initiatorMoodString #>.
<#   } #>
<#   if (this.Config.ShowMoodString && !string.IsNullOrWhiteSpace(this.DialogueData.recipientMoodString)) { #>
<#= this.DialogueData.recipientNickName #>'s overall mood is <#= this.DialogueData.recipientMoodString #>.
<#   } #>
<#   if (this.Config.ShowPersonality) {#>
<#     if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorPersonality)) { #>
<#= this.DialogueData.initiatorNickName #>'s personality is <#= this.DialogueData.initiatorPersonality #>
<#     } #>
<#     if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientPersonality)) { #>
<#= this.DialogueData.recipientNickName #>'s personality is <#= this.DialogueData.recipientPersonality #>
<#     } #>
<#   } #>
<#   if (this.Config.ShowOpinions && !string.IsNullOrWhiteSpace(this.DialogueData.recipientNickName)) { #>
<#= this.DialogueData.initiatorNickName #> <#= DescribeOpinion(this.DialogueData.initiatorOpinionOfRecipient2) #> <#= this.DialogueData.recipientNickName #>.
<#= this.DialogueData.recipientNickName #> <#= DescribeOpinion(this.DialogueData.recipientOpinionOfInitiator2) #> <#= this.DialogueData.initiatorNickName #>.
<#   } #>
You are a dialogue writer for the game RimWorld a sci-fi colony simulation game set on a distant, lawless planet.
<# if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientNickName)) { #>
Your job is to create a short conversation of <#= this.MaxOutputWords #> words or less total between <#= this.DialogueData.initiatorNickName #> and <#= this.DialogueData.recipientNickName #> based on the data provided and this interaction: <#= this.DialogueData.interaction #> 
Start the conversation with <#= this.DialogueData.initiatorNickName #>'s part.
Always put <#= this.DialogueData.initiatorNickName #>'s and <#= this.DialogueData.recipientNickName #>'s name in the dialogue.
<# } else { #>
Your job is to create a short monologue of <#= this.MaxOutputWords #> words for <#= this.DialogueData.initiatorNickName #> based on the data provided and this interaction: <#= this.DialogueData.interaction #> 
Start the conversation with <#= this.DialogueData.initiatorNickName #>'s part.
<# } #>
<#   if (this.DialogueData.interaction.Contains(" lovin' ")) { #>
The word "lovin'" is a euphemism for sex.
<#   } #>
It is important that you respond with only the dialogue exchange.
<# if (this.Config.ShowSpecialInstructions) { #>
<#= this.DialogueData.specialInstructions #>
<#  if (!string.IsNullOrWhiteSpace(this.DialogueData.initiatorInstructions)) { #>
Instructions for <#= this.DialogueData.initiatorNickName #>: <#= this.DialogueData.initiatorInstructions #>
<#  } #>
<#  if (!string.IsNullOrWhiteSpace(this.DialogueData.recipientInstructions)) { #>
Instructions for <#= this.DialogueData.recipientNickName #>: <#= this.DialogueData.recipientInstructions #>
<#  } #>
<# } #>
<# } #>